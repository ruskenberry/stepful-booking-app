{% extends 'base.html.twig' %}

{% block title %}New Session for {{ coach.firstName }} {{ coach.lastName }}{% endblock %}

{% block body %}
<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 text-gray-800">New Session for {{ coach.firstName }} {{ coach.lastName }}</h1>

    <div id="timeWindow" class="mb-4 text-lg font-semibold text-indigo-600"></div>

    {{ form_start(form, {'attr': {'class': 'bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4'}}) }}
        <div class="mb-4">
            {{ form_label(form.startDateTime, null, {'label_attr': {'class': 'block text-gray-700 text-sm font-bold mb-2'}}) }}
            {{ form_widget(form.startDateTime, {'attr': {'class': 'shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'}}) }}
            {{ form_errors(form.startDateTime) }}
        </div>

        <div class="flex items-center justify-between">
            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                Create Session
            </button>
            <a href="{{ path('app_coach_show', {'id': coach.id}) }}" class="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800">
                Cancel
            </a>
        </div>
    {{ form_end(form) }}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const timePicker = document.getElementById('session_startDateTime');
    const timeWindow = document.getElementById('timeWindow');

    function updateTimeWindow() {
        const selectedTime = new Date(timePicker.value);
        const endTime = new Date(selectedTime.getTime() + 2 * 60 * 60 * 1000); // Add 2 hours

        const options = { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric', 
            hour: 'numeric', 
            minute: 'numeric'
        };

        const startTimeString = selectedTime.toLocaleString('en-US', options);
        const endTimeString = endTime.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric' });

        timeWindow.textContent = `Session Time: ${startTimeString} - ${endTimeString}`;
    }

    timePicker.addEventListener('change', updateTimeWindow);
    
    // Initialize the time window text
    if (timePicker.value) {
        updateTimeWindow();
    }
});
</script>
{% endblock %}